input {
  beats {
    port => 5045
    ssl => false
    host => "0.0.0.0"
  }
}

# filter {
#   ################################
#   # Log Suricata (eve.json)
#   ################################
#   if [log][file][path] =~ "suricata/eve.json" {
#     # Gắn nhãn nguồn log
#     mutate { add_field => { "log_source" => "suricata" } }
#     # Parse JSON nội dung log
#     json { source => "message" }
#     # Chỉ giữ sự kiện có event_type = alert hoặc drop
#     if [event_type] != "alert" and [event_type] != "drop" {
#       drop { }
#     }
#     # Đưa các trường trong [alert] lên cấp trên
#     mutate {
#       add_field => { "signature_id"     => "%{[alert][signature_id]}" }
#       add_field => { "alert_signature"  => "%{[alert][signature]}" }
#       add_field => { "alert_action"     => "%{[alert][action]}" }
#     }
#     # Xóa các trường không cần thiết
#     mutate { remove_field => [ "alert", "message" ] }
#   }

#   ################################
#   # Log Nginx - access.log
#   ################################
#   else if [log][file][path] =~ "nginx/access.log" {
#     mutate { add_field => { "log_source" => "nginx_access" } }
#     # Grok parse theo định dạng access log: client_ip, method, request, response_code, bytes, referrer, agent
#     grok {
#       match => {
#         "message" => [
#           # 1) Chuẩn HTTP request
#           "%{IPORHOST:client_ip} %{DATA:ident} %{DATA:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{INT:response_code} %{INT:bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\"",
#           # 2) Fallback: bất kỳ chuỗi trong dấu "..."
#           "%{IPORHOST:client_ip} %{DATA:ident} %{DATA:auth} \[%{HTTPDATE:timestamp}\] \"%{DATA:raw_request}\" %{INT:response_code} %{INT:bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\""
#         ]
#        }
#     }
#     # Nếu chỉ có raw_request, gán thành method cho dễ xài
#     if [raw_request] and ![method] {
#       mutate {
#        add_field => { "method" => "%{raw_request}" }
#         remove_field => [ "raw_request" ]
#         }
#       }
#     # Loại bỏ các trường phụ và message gốc
#     mutate { remove_field => [ "ident", "auth", "message" ] }
#   }

#   ################################
#   # Log Nginx - error.log
#   ################################
#   else if [log][file][path] =~ "nginx/error.log" {
#     mutate { add_field => { "log_source" => "nginx_error" } }
#     # Grok parse error log: host, program và thông điệp lỗi
#     grok {
#       match => { "message" => "%{DATA:host} %{DATA:error_program}: %{GREEDYDATA:error_message}" }
#     }
#     mutate { remove_field => [ "message" ] }
#   }

#   ################################
#   # Log Hệ thống (auth.log, syslog, messages)
#   ################################
#   else if [log][file][path] =~ "(auth\\.log|syslog|messages)" {
#     mutate { add_field => { "log_source" => "system" } }
#     # Grok parse Syslog tiêu chuẩn: host, chương trình, thông điệp
#     grok {
#       match => { "message" => "%{SYSLOGHOST:syslog_host} %{SYSLOGPROG:sys_program}: %{GREEDYDATA:sys_message}" }
#     }
#     mutate { remove_field => [ "message" ] }
#   }

#   ################################
#   # ModSecurity Logs
#   ################################
#   else if [log][file][path] =~ "/var/log/modsec_audit.log" {
#     mutate { add_field => { "log_source" => "modsecurity" } }
    
#     # Check if message looks like JSON first
#     if [message] =~ /^\s*\{.*\}\s*$/ {
#       # Parse JSON ModSecurity audit log
#       json { 
#         source => "message" 
#         tag_on_failure => ["_jsonparsefailure_modsec"]
#       }
      
#       # Extract transaction details
#       if [transaction] {
#         mutate {
#           add_field => { "client_ip" => "%{[transaction][client_ip]}" }
#           add_field => { "client_port" => "%{[transaction][client_port]}" }
#           add_field => { "host_ip" => "%{[transaction][host_ip]}" }
#           add_field => { "host_port" => "%{[transaction][host_port]}" }
#           add_field => { "modsec_unique_id" => "%{[transaction][unique_id]}" }
#           add_field => { "modsec_timestamp" => "%{[transaction][time_stamp]}" }
#         }
#       }
      
#       # Extract request details
#       if [transaction][request] {
#         mutate {
#           add_field => { "method" => "%{[transaction][request][method]}" }
#           add_field => { "modsec_uri" => "%{[transaction][request][uri]}" }
#           add_field => { "http_version" => "%{[transaction][request][http_version]}" }
#           add_field => { "user_agent" => "%{[transaction][request][headers][User-Agent]}" }
#           add_field => { "modsec_hostname" => "%{[transaction][request][headers][Host]}" }
#         }
#       }
      
#       # Extract response details
#       if [transaction][response] {
#         mutate {
#           add_field => { "response_code" => "%{[transaction][response][http_code]}" }
#         }
#       }
      
#       # Extract ModSecurity producer info
#       if [producer] {
#         mutate {
#           add_field => { "modsec_version" => "%{[producer][modsecurity]}" }
#           add_field => { "modsec_connector" => "%{[producer][connector]}" }
#           add_field => { "modsec_engine" => "%{[producer][secrules_engine]}" }
#         }
#       }
      
#       # Process messages array - chỉ lấy message đầu tiên
#       if [messages][0] {
#         mutate {
#           add_field => { "modsec_rule_msg" => "%{[messages][0][message]}" }
#           add_field => { "modsec_rule_id" => "%{[messages][0][details][ruleId]}" }
#           add_field => { "modsec_severity" => "%{[messages][0][details][severity]}" }
#           add_field => { "modsec_file" => "%{[messages][0][details][file]}" }
#           add_field => { "modsec_line" => "%{[messages][0][details][lineNumber]}" }
#           add_field => { "modsec_data" => "%{[messages][0][details][data]}" }
#         }
        
#         if [messages][0][details][tags] {
#           mutate {
#             add_field => { "modsec_tags" => "%{[messages][0][details][tags]}" }
#           }
#         }
#       }
      
#       # Tạo trường tóm tắt
#       if [modsec_rule_msg] and [modsec_rule_id] {
#         mutate {
#           add_field => { 
#             "modsec_summary" => "Rule %{modsec_rule_id}: %{modsec_rule_msg}" 
#           }
#         }
#       }
      
#       # Convert severity to numeric
#       if [modsec_severity] {
#         mutate {
#           add_field => { "modsec_severity_num" => "%{modsec_severity}" }
#         }
#       }
      
#       # Xóa các trường không cần thiết
#       mutate { 
#         remove_field => [ "transaction", "producer", "messages", "response", "message" ] 
#       }
#     }
#     # Handle text-based ModSecurity audit log
#     else {
#       # Skip delimiter lines and header lines
#       if [message] =~ /^---.*---[A-Z]--$/ {
#         drop { }
#       }
      
#       # Parse ModSecurity rule violations
#       if [message] =~ /^ModSecurity:/ {
#         grok {
#           match => { 
#             "message" => "ModSecurity: %{DATA:modsec_action}\\. %{DATA:modsec_rule_msg}(?: \\[file \"%{DATA:modsec_file}\"\\])?(?: \\[line \"%{INT:modsec_line}\"\\])?(?: \\[id \"%{INT:modsec_rule_id}\"\\])?(?: \\[msg \"%{DATA:modsec_rule_msg_detail}\"\\])?(?: \\[data \"%{DATA:modsec_data}\"\\])?(?: \\[severity \"%{DATA:modsec_severity}\"\\])?(?: \\[hostname \"%{DATA:modsec_hostname}\"\\])?(?: \\[uri \"%{DATA:modsec_uri}\"\\])?(?: \\[unique_id \"%{DATA:modsec_unique_id}\"\\])?.*" 
#           }
#         }
#       }
#       # Parse HTTP headers if they contain useful info
#       else if [message] =~ /^(Host|User-Agent|Referer): / {
#         grok {
#           match => { 
#             "message" => "(?<header_name>[^:]+): (?<header_value>.*)" 
#           }
#         }
        
#         # Extract specific headers we care about
#         if [header_name] == "Host" {
#           mutate { add_field => { "modsec_hostname" => "%{header_value}" } }
#         }
#         else if [header_name] == "User-Agent" {
#           mutate { add_field => { "user_agent" => "%{header_value}" } }
#         }
#         else if [header_name] == "Referer" {
#           mutate { add_field => { "referrer" => "%{header_value}" } }
#         }
        
#         mutate { remove_field => [ "header_name", "header_value" ] }
#       }
#       # Drop other header lines and noise
#       else if [message] =~ /^(Accept|Content|Connection|Cookie|Server|Date): / {
#         drop { }
#       }
#     }
    
#     # Convert severity to numeric for easier filtering
#     if [modsec_severity] {
#       if [modsec_severity] == "0" { mutate { add_field => { "modsec_severity_num" => "0" } } }
#       else if [modsec_severity] == "1" { mutate { add_field => { "modsec_severity_num" => "1" } } }
#       else if [modsec_severity] == "2" { mutate { add_field => { "modsec_severity_num" => "2" } } }
#       else if [modsec_severity] == "3" { mutate { add_field => { "modsec_severity_num" => "3" } } }
#       else if [modsec_severity] == "4" { mutate { add_field => { "modsec_severity_num" => "4" } } }
#       else if [modsec_severity] == "5" { mutate { add_field => { "modsec_severity_num" => "5" } } }
#       else if [modsec_severity] == "6" { mutate { add_field => { "modsec_severity_num" => "6" } } }
#       else if [modsec_severity] == "7" { mutate { add_field => { "modsec_severity_num" => "7" } } }
#     }
#   }
#   ################################
#   # Windows Security Logs
#   ################################
#   else if [log][file][path] =~ "Security" {
#     mutate { add_field => { "log_source" => "windows_security" } }
#     # Không cần parse thêm; giữ các trường cơ bản như winlog.event_id, event_data.SubjectUserName, event.action, message
#   }

#   ################################
#   # Các log khác
#   ################################
#   else {
#     mutate { add_field => { "log_source" => "other" } }
#     # Không parse thêm; sẽ giữ lại timestamp và message gốc
#   }

#   # Phần chung cho tất cả logs
#   mutate {
#     remove_field => ["host", "agent", "ecs", "input", "log", "fileset"]
#   }

#   ################################
#   # Prune filter: chỉ giữ các trường cần thiết
#   ################################
#   prune {
#     whitelist_names => [
#       "@timestamp", "log_source",
#       # Trường Suricata
#       "event_type", "src_ip", "dest_ip", "proto", "flow_id",
#       "signature_id", "alert_signature", "alert_action", "community_id",
#       # Trường Nginx access
#       "client_ip", "client_port", "method", "request", "response_code", "bytes", "referrer", "agent",
#       # Trường Nginx error
#       "error_program", "error_message",
#       # Trường hệ thống
#       "syslog_host", "sys_program", "sys_message",
#       # Trường Windows
#       "host.name", "winlog.event_id", "winlog.event_data.SubjectUserName", "event.action",
#       # Trường ModSecurity
#       "modsec_rule_id", "modsec_severity", "modsec_severity_num", "modsec_rule_msg", 
#       "modsec_hostname", "modsec_uri", "modsec_unique_id", "modsec_tags",
#       "modsec_file", "modsec_line", "modsec_data", "modsec_version", "modsec_connector",
#       "modsec_engine", "modsec_all_rules", "modsec_timestamp", "user_agent", "http_version", 
#       "host_ip", "host_port",
#       # Luôn giữ message để hiển thị (nếu cần)
#       "message"
#     ]
#   }
# }

output {
  elasticsearch {
    index => "system_logs-%{+YYYY.MM.dd}"
    hosts => ["https://localhost:9200"]
    user => "wanthinnn"
    password => "Thienlai0941841870@#$"
    ssl => true
    ssl_certificate_verification => false
  }
  # Thêm output debug
  stdout { codec => rubydebug }
}
